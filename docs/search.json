[
  {
    "objectID": "pages/combining.html",
    "href": "pages/combining.html",
    "title": "Combining Excel and Delimited Data",
    "section": "",
    "text": "accessing and importing the white wine dataset from directory using read_excel function.\n\n\nlibrary(readxl)\nwwine &lt;- read_excel(\"white-wine.xlsx\", sheet = 1)\nwwine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nUsing the second sheet of white-wine.xlsx to rename the columns of wine object using the colnames function.\n\n\nnames &lt;- read_excel(\"white-wine.xlsx\", sheet = 2)\ncolnames(wwine) &lt;- names$Variables\ncolnames(wwine)\n\n [1] \"fixed_acidity\"        \"volatile_acidity\"     \"citric_acid\"         \n [4] \"residual_sugar\"       \"chlorides\"            \"free_sulfur_dioxide\" \n [7] \"total_sulfur_dioxide\" \"density\"              \"pH\"                  \n[10] \"sulphates\"            \"alcohol\"              \"quality\"             \n\n\n\nAdding a column to the dataset indicating color of wine using mutate.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nwwine &lt;- wwine |&gt; mutate(type = \"white\")\nwwine\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\nimporting a new dataset that looks at red wine, coerces columns to be the same data type as the white wine dataset, and applying the same changes as the white wine dataset, with type being red instead of white.\n\n\nrwine &lt;- read_csv2(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1599 Columns: 12\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (5): volatile acidity, citric acid, chlorides, density, sulphates\ndbl (2): total sulfur dioxide, quality\nnum (5): fixed acidity, residual sugar, free sulfur dioxide, pH, alcohol\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nrwine &lt;- rwine |&gt; mutate(across(c(2:3, 5, 8, 10), as.double))\ncolnames(rwine) &lt;- names$Variables\nrwine &lt;- rwine |&gt; mutate(type = \"red\")\nrwine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            74             0.7         0                19     0.076\n 2            78             0.88        0                26     0.098\n 3            78             0.76        0.04             23     0.092\n 4           112             0.28        0.56             19     0.075\n 5            74             0.7         0                19     0.076\n 6            74             0.66        0                18     0.075\n 7            79             0.6         0.06             16     0.069\n 8            73             0.65        0                12     0.065\n 9            78             0.58        0.02              2     0.073\n10            75             0.5         0.36             61     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\nCombining the two data frames into one using the bind_rows function\n\n\nwine &lt;- bind_rows(wwine, rwine)\nwine\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\nChain that sorts wine to include high quality wine with reasonable alcohol value.\n\n\nwine |&gt; filter(quality &gt; 6.5 , alcohol &lt; 132)\n\n# A tibble: 1,198 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            66             0.16        0.4             1.5     0.044\n 2            66             0.17        0.38            1.5     0.032\n 3            62             0.66        0.48            1.2     0.029\n 4            62             0.66        0.48            1.2     0.029\n 5            64             0.31        0.38            2.9     0.038\n 6            68             0.26        0.42            1.7     0.049\n 7            72             0.32        0.36            2       0.033\n 8            74             0.18        0.31            1.4     0.058\n 9            66             0.25        0.29            1.1     0.068\n10            62             0.16        0.33            1.1     0.057\n# ℹ 1,188 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\ncontinuing chain to order dataset from highest quality to lowest\n\n\nwine |&gt; \n  filter(quality &gt; 6.5 , alcohol &lt; 132) |&gt;\n  arrange(desc(quality))\n\n# A tibble: 1,198 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            91             0.27        0.45           10.6     0.035\n 2            66             0.36        0.29            1.6     0.021\n 3            74             0.24        0.36            2       0.031\n 4            69             0.36        0.34            4.2     0.018\n 5            71             0.26        0.49            2.2     0.032\n 6            62             0.66        0.48            1.2     0.029\n 7            62             0.66        0.48            1.2     0.029\n 8            68             0.26        0.42            1.7     0.049\n 9            67             0.23        0.31            2.1     0.046\n10            67             0.23        0.31            2.1     0.046\n# ℹ 1,188 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\ncontinuing chain to only select variables that contain acid, alcohol, type, and quality.\n\n\nwine |&gt; \n  filter(quality &gt; 6.5 , alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt; \n  select(c(pH, alcohol, type, quality))\n\n# A tibble: 1,198 × 4\n      pH alcohol type  quality\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1    32     104 white       9\n 2   341     124 white       9\n 3   328     125 white       9\n 4   328     127 white       9\n 5   337     129 white       9\n 6   333     128 white       8\n 7   333     128 white       8\n 8   347     105 white       8\n 9   333     107 white       8\n10   333     107 white       8\n# ℹ 1,188 more rows\n\n\n\nadding the mean and sd of the alcohol variable to the dataset, grouped by wine quality.\n\n\nwine &lt;- wine |&gt; \n  filter(quality &gt; 6.5 , alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt; \n  select(c(pH, alcohol, type, quality)) |&gt;\n  group_by(quality) |&gt;\n  mutate(alcohol_mean = mean(alcohol), alcohol_sd = sd(alcohol))\nwine\n\n# A tibble: 1,198 × 6\n# Groups:   quality [3]\n      pH alcohol type  quality alcohol_mean alcohol_sd\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;\n 1    32     104 white       9         122.       10.1\n 2   341     124 white       9         122.       10.1\n 3   328     125 white       9         122.       10.1\n 4   328     127 white       9         122.       10.1\n 5   337     129 white       9         122.       10.1\n 6   333     128 white       8         102.       36.8\n 7   333     128 white       8         102.       36.8\n 8   347     105 white       8         102.       36.8\n 9   333     107 white       8         102.       36.8\n10   333     107 white       8         102.       36.8\n# ℹ 1,188 more rows",
    "crumbs": [
      "Home",
      "Combining Excel and Delimited Data"
    ]
  },
  {
    "objectID": "pages/concepts.html",
    "href": "pages/concepts.html",
    "title": "Conceptual Questions",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\nThe relative path I would specify to get MyData.csv is read.csv(“myfolder/MyData.csv”)\n\n\nWhat are the major benefits of using R projects?\n\n\nThe major benefits of using R projects is that they provide an intuitive way to separate work into different organized groups. Within each group is its own working directory, folder structure, etc. It also simplifies the sharing of R code to others for contributions.\n\n\nWhat is git and what is github?\n\n\nGit is a system of version control that tracks changes to programs/code. Github is a website that hosts Git repositories\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nThe tibble is a reimagining of the data frame. The two main differences is that a tibble does less and is more temperamental, meaning that working with them tends to encourage more expressive code.\n\n\nRewrite the following nested function call using BaseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\n\nas_tibble(iris) |&gt; select(starts_with(“Petal”), Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species)\n\n\nas a chunk:\n\n\n#as_tibble(iris) |&gt;\n #select(starts_with(\"Petal\"), Species) |&gt;\n  #filter(Petal.Length &lt; 1.55) |&gt;\n  #arrange(Species)",
    "crumbs": [
      "Home",
      "Conceptual Questions"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Homework 4",
    "section": "",
    "text": "An example pages site with multiple pages and a table of contents.\nThis could be a landing page for the site. Feel free to put whatever here!",
    "crumbs": [
      "Home",
      "Homework 4"
    ]
  },
  {
    "objectID": "pages/read_delimited.html",
    "href": "pages/read_delimited.html",
    "title": "Reading Delimited Data",
    "section": "",
    "text": "installing (commented out so it doesn’t rerun each time) and loading the tidyverse package to read in the dataset, then naming each column within the read_csv function.\n\n\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nGlass &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nusing the mutate and factor function to create a chain that renames the numeric values of Type_of_glass to descriptive character strings.\n\n\nGlass |&gt; \n  mutate(Type_of_glass = Type_of_glass |&gt; \n           factor(levels = 1:7, labels = c(\"building_windows_float_processed\", \"building_windows_non_float_processed\", \"vehicle_windows_float_processed\", \"vehicle_windows_non_float_processed\", \"containers\", \"tableware\", \"headlamps\")))\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\n\nContinuing the chain and using the filter function to keep Fe variables whose value is less than 0.2 as well as tableware and headlamp values for Type_of_glass.\n\n\nGlass &lt;- Glass |&gt; \n  mutate(Type_of_glass = Type_of_glass |&gt;\n           factor(levels = 1:7, labels = c(\"building_windows_float_processed\", \"building_windows_non_float_processed\", \"vehicle_windows_float_processed\", \"vehicle_windows_non_float_processed\", \"containers\", \"tableware\", \"headlamps\"))) |&gt; \n  filter(Fe &lt; 0.2) |&gt;\n  filter(Type_of_glass == c(\"headlamps\", \"tableware\"))\n\nWarning: There were 2 warnings in `filter()`.\nThe first warning was:\nℹ In argument: `Type_of_glass == c(\"headlamps\", \"tableware\")`.\nCaused by warning in `==.default`:\n! longer object length is not a multiple of shorter object length\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\nGlass\n\n# A tibble: 20 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0     0    tableware    \n 2   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0     0    tableware    \n 3   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0     0    tableware    \n 4   183  1.52  14.2  0     2.09  72.7  0    10.9   0     0    tableware    \n 5   185  1.51  17.4  0     0.34  75.4  0     6.65  0     0    tableware    \n 6   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19  0    headlamps    \n 7   188  1.52  13.4  3.34  1.23  72.4  0.6   8.83  0     0    headlamps    \n 8   190  1.52  15.8  1.83  1.31  70.4  0.31  8.61  1.68  0    headlamps    \n 9   192  1.52  14.8  0     2.38  73.3  0     8.76  0.64  0.09 headlamps    \n10   194  1.52  14.8  0     2     73.0  0     8.53  1.59  0.08 headlamps    \n11   196  1.52  14.1  0     2.68  73.4  0.08  9.07  0.61  0.05 headlamps    \n12   198  1.52  14.7  0     2.34  73.3  0     8.95  0.66  0    headlamps    \n13   200  1.52  15.0  0     2.51  73.0  0.05  8.83  0.53  0    headlamps    \n14   202  1.52  12.0  0     1.19  75.2  2.7   8.93  0     0    headlamps    \n15   204  1.52  14.8  0     1.99  73.1  0     8.28  1.71  0    headlamps    \n16   206  1.52  15.0  0     1.8   73.0  0     8.61  1.55  0    headlamps    \n17   208  1.52  14.4  0     1.82  72.9  1.41  6.47  2.88  0    headlamps    \n18   210  1.52  14.1  0     2.88  72.6  0.08  9.18  1.06  0    headlamps    \n19   212  1.52  14.4  0     2.02  73.4  0     8.44  1.64  0    headlamps    \n20   214  1.52  14.2  0     2.08  73.4  0     8.62  1.67  0    headlamps",
    "crumbs": [
      "Home",
      "Reading Delimited Data"
    ]
  },
  {
    "objectID": "pages/read_delimited.html#glass-data",
    "href": "pages/read_delimited.html#glass-data",
    "title": "Reading Delimited Data",
    "section": "",
    "text": "installing (commented out so it doesn’t rerun each time) and loading the tidyverse package to read in the dataset, then naming each column within the read_csv function.\n\n\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nGlass &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nusing the mutate and factor function to create a chain that renames the numeric values of Type_of_glass to descriptive character strings.\n\n\nGlass |&gt; \n  mutate(Type_of_glass = Type_of_glass |&gt; \n           factor(levels = 1:7, labels = c(\"building_windows_float_processed\", \"building_windows_non_float_processed\", \"vehicle_windows_float_processed\", \"vehicle_windows_non_float_processed\", \"containers\", \"tableware\", \"headlamps\")))\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\n\nContinuing the chain and using the filter function to keep Fe variables whose value is less than 0.2 as well as tableware and headlamp values for Type_of_glass.\n\n\nGlass &lt;- Glass |&gt; \n  mutate(Type_of_glass = Type_of_glass |&gt;\n           factor(levels = 1:7, labels = c(\"building_windows_float_processed\", \"building_windows_non_float_processed\", \"vehicle_windows_float_processed\", \"vehicle_windows_non_float_processed\", \"containers\", \"tableware\", \"headlamps\"))) |&gt; \n  filter(Fe &lt; 0.2) |&gt;\n  filter(Type_of_glass == c(\"headlamps\", \"tableware\"))\n\nWarning: There were 2 warnings in `filter()`.\nThe first warning was:\nℹ In argument: `Type_of_glass == c(\"headlamps\", \"tableware\")`.\nCaused by warning in `==.default`:\n! longer object length is not a multiple of shorter object length\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\nGlass\n\n# A tibble: 20 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0     0    tableware    \n 2   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0     0    tableware    \n 3   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0     0    tableware    \n 4   183  1.52  14.2  0     2.09  72.7  0    10.9   0     0    tableware    \n 5   185  1.51  17.4  0     0.34  75.4  0     6.65  0     0    tableware    \n 6   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19  0    headlamps    \n 7   188  1.52  13.4  3.34  1.23  72.4  0.6   8.83  0     0    headlamps    \n 8   190  1.52  15.8  1.83  1.31  70.4  0.31  8.61  1.68  0    headlamps    \n 9   192  1.52  14.8  0     2.38  73.3  0     8.76  0.64  0.09 headlamps    \n10   194  1.52  14.8  0     2     73.0  0     8.53  1.59  0.08 headlamps    \n11   196  1.52  14.1  0     2.68  73.4  0.08  9.07  0.61  0.05 headlamps    \n12   198  1.52  14.7  0     2.34  73.3  0     8.95  0.66  0    headlamps    \n13   200  1.52  15.0  0     2.51  73.0  0.05  8.83  0.53  0    headlamps    \n14   202  1.52  12.0  0     1.19  75.2  2.7   8.93  0     0    headlamps    \n15   204  1.52  14.8  0     1.99  73.1  0     8.28  1.71  0    headlamps    \n16   206  1.52  15.0  0     1.8   73.0  0     8.61  1.55  0    headlamps    \n17   208  1.52  14.4  0     1.82  72.9  1.41  6.47  2.88  0    headlamps    \n18   210  1.52  14.1  0     2.88  72.6  0.08  9.18  1.06  0    headlamps    \n19   212  1.52  14.4  0     2.02  73.4  0     8.44  1.64  0    headlamps    \n20   214  1.52  14.2  0     2.08  73.4  0     8.62  1.67  0    headlamps",
    "crumbs": [
      "Home",
      "Reading Delimited Data"
    ]
  },
  {
    "objectID": "pages/read_delimited.html#yeast-data",
    "href": "pages/read_delimited.html#yeast-data",
    "title": "Reading Delimited Data",
    "section": "Yeast Data",
    "text": "Yeast Data\n\nReading Yeast data into R and naming the columns\n\n\nYeast &lt;- read_table(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", col_names = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\"))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\nYeast\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\nbeginning of the chain which removes columns seq_name and nuc.\n\n\nYeast |&gt;\n  select(-seq_name, -nuc)\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\n\nContinuing the chain to include columns corresponding to the mean and median of each variable at each class grouping using the mutate and across function.\n\n\nYeast &lt;- Yeast |&gt;\n  select(-seq_name, -nuc) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, median = median), names = \"{.col}_{.fn}\"))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(...)`.\nℹ In group 1: `class = \"CYT\"`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\nYeast\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;",
    "crumbs": [
      "Home",
      "Reading Delimited Data"
    ]
  }
]